import datetime

VERSION = "2015-06"
SAMPLE = "04fc5bda03f3e807360d788dd1ade0fa"

POSITION_LETTER_A_IN_ASCII = 0x61
DOMAIN_COUNT = 0x1e
SEEDS = [0x049f635b, 0x029401cd, 0x020c1182, 0x05c4fe35]

def cutTo32bits(value):
    return value & 0xFFFFFFFF

class DgaDailySeeds(object):

    def __init__(self, date):
        self.date = date
        self.seeds = self._generateDailySeed()

    def _generateDailySeed(self):
        # https://msdn.microsoft.com/en-us/library/windows/desktop/ms724950(v=vs.85).aspx
        systemTimeStruct = [0, 0, 0, 0]
        systemTimeStruct[0] = self.date.month * 0x10000 + self.date.year
        systemTimeStruct[1] = self.date.day * 0x10000 + (self.date.weekday() + 1) % 7
        ecx = cutTo32bits(systemTimeStruct[0] + systemTimeStruct[1])
        return [ecx + s for s in SEEDS]

class DgAlgorithm(object):

    def execute(self, seeds, modulo):
        a = cutTo32bits(seeds.seeds[0] << 11) ^ seeds.seeds[0]
        b = cutTo32bits(seeds.seeds[3] >> 19) ^ seeds.seeds[3]
        a = b ^ a ^ cutTo32bits(a >> 8)
        c = seeds.seeds[2]

        self._updateSeeds(seeds, a)

        return (cutTo32bits(a + c) % modulo) / 100

    def _updateSeeds(self, s, a):
        s.seeds[0] = cutTo32bits(s.seeds[0] + s.seeds[1])
        s.seeds[1] = cutTo32bits(s.seeds[1] + s.seeds[2])
        s.seeds[2] = cutTo32bits(s.seeds[2] + s.seeds[3])
        s.seeds[3] = a


class NymaimDga(object):

    def __init__(self, algorithm, seeds):
        self.algorithm = algorithm
        self.seeds = seeds

    def generateDomains(self):
        domains = []
        for i in range(0, DOMAIN_COUNT):
            domain = self.generateDomain()
            domains.append(domain)
        return domains

    def generateDomain(self):
        lenDomain = self.computeLengthOfDomain()
        domain = ""
        for j in range(lenDomain):
            domain += self.computeChar()
        domain += "."
        tld = self.computeTld()
        domain += tld
        return domain

    def computeLengthOfDomain(self):
        eax = self.algorithm.execute(self.seeds, 600)
        return eax+6

    def computeChar(self):
        eax = self.algorithm.execute(self.seeds, 2600)
        return chr(eax + POSITION_LETTER_A_IN_ASCII)

    def computeTld(self):
        tld = ["ru","net","in","com","xyz", "info"]
        eax = self.algorithm.execute(self.seeds, 600)
        return tld[eax]


def main():
    today = datetime.datetime.now() - datetime.timedelta(days=7)
    algorithm = DgAlgorithm()
    seeds = DgaDailySeeds(today)
    myNymaimDga = NymaimDga(algorithm, seeds)
    print "Nymaim domains for today: " + str(today)
    print "Based on Nymaim version: " + VERSION
    print "Based on Nymaim sample: " + SAMPLE
    print myNymaimDga.generateDomains()

if __name__ == "__main__":
    main()
