from behave import *
from mock import MagicMock
import datetime

from code.NymaimDga import NymaimDga, DgAlgorithm, DgaDailySeeds

@given('the day is {theDay}')
def given_the_day_is(context, theDay):
    splittedDate = theDay.replace('"', "").split("-")
    context.date = datetime.date(int(splittedDate[0]), int(splittedDate[1]), int(splittedDate[2]))

@when('DGA computes domains for this date')
def dga_computes_domains_for_this_date(context):
    seeds = DgaDailySeeds(context.date)
    algorithm = DgAlgorithm()
    context.nymaimDga = NymaimDga(algorithm, seeds)
    context.domains = context.nymaimDga.generateDomains()

@then('the domais for this date are')
def check_domains_for_date(context):
    for row in context.table:
        assert row["domains"] in context.domains




@when('initialize DGA on this date')
def initialize_dga_on_this_date(context):
    context.seeds = DgaDailySeeds(context.date)

@then('the seeds are')
def check_seeds(context):
    for row in context.table:
        assert int(row["seed"]) in context.seeds.seeds


@when('computes length of domain')
def compute_length_of_domain(context):
    algorithm = DgAlgorithm()
    nymaimDga = NymaimDga(algorithm, context.seeds)
    context.domainLength = nymaimDga.computeLengthOfDomain()

@then('the length is {l}')
def check_domain_length(context, l):
    assert context.domainLength == int(l)




@given('the modulo {modulo}')
def get_modulo_and_seeds(context, modulo):
    context.dgaAlgorithm = DgAlgorithm()
    context.modulo = int(modulo)

@given('the seeds')
def get_seeds(context):
    seeds = []
    for row in context.table:
        seeds.append(int(row["seed"]))

    dgaSeeds = MagicMock(DgaDailySeeds)
    dgaSeeds.seeds = seeds
    context.seeds = dgaSeeds

@when('PRNG executes')
def dgalgorithm_executes(context):
    context.result = context.dgaAlgorithm.execute(context.seeds, context.modulo)

@then('the output is {result}')
def the_output_is(context, result):
    assert context.result == int(result)



@when('DGA computes TLD')
def dga_computes_tld(context):
    dgaAlgorithm = DgAlgorithm()
    nymaimDga  = NymaimDga(dgaAlgorithm, context.seeds)
    context.result = nymaimDga.computeTld()

@then('the TLD is {tld}')
def then_the_tld_is(context, tld):
    assert tld == context.result
